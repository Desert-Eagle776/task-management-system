<<<<<<< HEAD
import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Observable } from 'rxjs';
import { ROLES_KEY } from './roles.decorator';
import { AuthService } from 'src/auth/auth.service';
import { FamilyRoles } from 'src/common';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector, private authService: AuthService) {}

  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    const requireRoles = this.reflector.getAllAndOverride<FamilyRoles[]>(
      ROLES_KEY,
      [context.getHandler(), context.getClass()],
    );
=======
import { CanActivate, ExecutionContext, Injectable } from "@nestjs/common";
import { Reflector } from "@nestjs/core";
import { Observable } from "rxjs";
import { ROLES_KEY } from "./roles.decorator";
import { AuthService } from "src/auth/auth.service";

export enum FamilyRoles {
  User = 'user',
  Admin = 'admin',
  SuperAdmin = 'superadmin'
}

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(
    private reflector: Reflector,
    private authService: AuthService
  ) { }

  canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {
    const requireRoles = this.reflector.getAllAndOverride<FamilyRoles[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
>>>>>>> 335b50b5c8006c86a7ae9c42d5a70c6e6b5e4eb5

    if (!requireRoles) {
      return false;
    }

    const request = context.switchToHttp().getRequest();
    const token = request.headers?.authorization?.split(' ');
    const decodedToken = this.authService.getUserDataFromToken(token[1]);

    if (!decodedToken) {
      return false;
    }

    return this.validateRoles(requireRoles, decodedToken.roles);
  }

  validateRoles(roles: string[], userRoles: string[]) {
<<<<<<< HEAD
    return roles.some((role) => userRoles.includes(role));
=======
    return roles.some(role => userRoles.includes(role));
>>>>>>> 335b50b5c8006c86a7ae9c42d5a70c6e6b5e4eb5
  }
}
